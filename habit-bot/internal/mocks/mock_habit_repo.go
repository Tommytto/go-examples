// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Tommytto/habit-bot/internal/repos (interfaces: HabitsRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	repos "github.com/Tommytto/habit-bot/internal/repos"
	gomock "github.com/golang/mock/gomock"
)

// MockHabitsRepo is a mock of HabitsRepo interface.
type MockHabitsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockHabitsRepoMockRecorder
}

// MockHabitsRepoMockRecorder is the mock recorder for MockHabitsRepo.
type MockHabitsRepoMockRecorder struct {
	mock *MockHabitsRepo
}

// NewMockHabitsRepo creates a new mock instance.
func NewMockHabitsRepo(ctrl *gomock.Controller) *MockHabitsRepo {
	mock := &MockHabitsRepo{ctrl: ctrl}
	mock.recorder = &MockHabitsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitsRepo) EXPECT() *MockHabitsRepoMockRecorder {
	return m.recorder
}

// AddThought mocks base method.
func (m *MockHabitsRepo) AddThought(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddThought", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddThought indicates an expected call of AddThought.
func (mr *MockHabitsRepoMockRecorder) AddThought(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddThought", reflect.TypeOf((*MockHabitsRepo)(nil).AddThought), arg0, arg1)
}

// Create mocks base method.
func (m *MockHabitsRepo) Create(arg0 *repos.HabitEntity) (*repos.HabitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*repos.HabitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockHabitsRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHabitsRepo)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockHabitsRepo) Get(arg0 string) (*repos.HabitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*repos.HabitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHabitsRepoMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHabitsRepo)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockHabitsRepo) GetAll(arg0 string) ([]*repos.HabitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*repos.HabitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockHabitsRepoMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockHabitsRepo)(nil).GetAll), arg0)
}

// UpdateOne mocks base method.
func (m *MockHabitsRepo) UpdateOne(arg0 string, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockHabitsRepoMockRecorder) UpdateOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockHabitsRepo)(nil).UpdateOne), arg0, arg1)
}
