// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Tommytto/habit-bot/internal/repos (interfaces: UsersRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	repos "github.com/Tommytto/habit-bot/internal/repos"
	gomock "github.com/golang/mock/gomock"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// AffirmationWasSentToday mocks base method.
func (m *MockUsersRepo) AffirmationWasSentToday(arg0 *repos.UserEntity, arg1 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AffirmationWasSentToday", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AffirmationWasSentToday indicates an expected call of AffirmationWasSentToday.
func (mr *MockUsersRepoMockRecorder) AffirmationWasSentToday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AffirmationWasSentToday", reflect.TypeOf((*MockUsersRepo)(nil).AffirmationWasSentToday), arg0, arg1)
}

// Create mocks base method.
func (m *MockUsersRepo) Create(arg0 repos.UserEntity) (*repos.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*repos.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepo)(nil).Create), arg0)
}

// FindAll mocks base method.
func (m *MockUsersRepo) FindAll() ([]*repos.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*repos.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUsersRepoMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUsersRepo)(nil).FindAll))
}

// FindOneByTelegramId mocks base method.
func (m *MockUsersRepo) FindOneByTelegramId(arg0 int64) (*repos.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByTelegramId", arg0)
	ret0, _ := ret[0].(*repos.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByTelegramId indicates an expected call of FindOneByTelegramId.
func (mr *MockUsersRepoMockRecorder) FindOneByTelegramId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByTelegramId", reflect.TypeOf((*MockUsersRepo)(nil).FindOneByTelegramId), arg0)
}

// GetAndSetAffirmationToday mocks base method.
func (m *MockUsersRepo) GetAndSetAffirmationToday(arg0 *repos.UserEntity, arg1 time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndSetAffirmationToday", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetAndSetAffirmationToday indicates an expected call of GetAndSetAffirmationToday.
func (mr *MockUsersRepoMockRecorder) GetAndSetAffirmationToday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndSetAffirmationToday", reflect.TypeOf((*MockUsersRepo)(nil).GetAndSetAffirmationToday), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockUsersRepo) UpdateOne(arg0 string, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockUsersRepoMockRecorder) UpdateOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockUsersRepo)(nil).UpdateOne), arg0, arg1)
}
