// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Tommytto/habit-bot/internal (interfaces: BotAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockBotAPI is a mock of BotAPI interface.
type MockBotAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBotAPIMockRecorder
}

// MockBotAPIMockRecorder is the mock recorder for MockBotAPI.
type MockBotAPIMockRecorder struct {
	mock *MockBotAPI
}

// NewMockBotAPI creates a new mock instance.
func NewMockBotAPI(ctrl *gomock.Controller) *MockBotAPI {
	mock := &MockBotAPI{ctrl: ctrl}
	mock.recorder = &MockBotAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotAPI) EXPECT() *MockBotAPIMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockBotAPI) Request(arg0 tgbotapi.Chattable) (*tgbotapi.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0)
	ret0, _ := ret[0].(*tgbotapi.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockBotAPIMockRecorder) Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockBotAPI)(nil).Request), arg0)
}

// Send mocks base method.
func (m *MockBotAPI) Send(arg0 tgbotapi.Chattable) (tgbotapi.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(tgbotapi.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockBotAPIMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBotAPI)(nil).Send), arg0)
}
